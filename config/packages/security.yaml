security:
  access_denied_url: /access-denied
  password_hashers:
    # Sp√©cifie que les mots de passe des utilisateurs qui impl√©mentent PasswordAuthenticatedUserInterface seront hach√©s avec l'algorithme choisi ici
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
      algorithm: auto  # Symfony choisit automatiquement l'algorithme de hachage (g√©n√©ralement bcrypt ou argon2, dans le projet bcrypt est utilis√©)
      cost: 15  # D√©termine le co√ªt de l'algorithme de hachage (complexit√©)

  # Configuration du fournisseur d'utilisateurs (d'o√π proviennent les utilisateurs pour l'authentification)
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User  # Indique que les utilisateurs viennent de l'entit√© User
        property: email  # Utilise l'email pour retrouver les utilisateurs dans la base de donn√©es

  # D√©finition des firewalls (protection des routes de l'application)
  firewalls:
    # Configuration du firewall pour les routes de d√©veloppement, comme les outils de d√©bogage et les ressources statiques (CSS, JS, etc.)
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/  # Ce motif couvre les routes li√©es au profiler, aux fichiers CSS, JS et images
      security: false  # Pas de s√©curit√© appliqu√©e sur ces routes (les utilisateurs peuvent y acc√©der sans √™tre authentifi√©s)


    api_login:
         pattern: ^/api/login  # Cette route serait sp√©cifique aux API (connexion via API)
         stateless: true  # Indique que l'API ne maintient pas de session (stateless)
         json_login:  # Configuration pour une authentification JSON (souvent utilis√©e pour les APIs)
             check_path: /api/login  # La route o√π les donn√©es de connexion sont envoy√©es
             username_path: email
             success_handler: lexik_jwt_authentication.handler.authentication_success  # Si la connexion r√©ussit, la r√©ponse JSON sera g√©r√©e ici
             failure_handler: lexik_jwt_authentication.handler.authentication_failure  # Si la connexion √©choue, la r√©ponse JSON sera g√©r√©e ici


    api_articles:
         pattern: ^/api/articles  # Cette route serait sp√©cifique aux API (connexion via API)
         stateless: true  # Indique que l'API ne maintient pas de session (stateless)
         json_login:  # Configuration pour une authentification JSON (souvent utilis√©e pour les APIs)
          check_path: /api/articles  # La route o√π les donn√©es de connexion sont envoy√©es






             

    # Configuration principale du firewall pour toutes les autres routes
    main:
      pattern: ^/  # Cela couvre toutes les routes qui commencent par '/' (toutes les routes de l'application)
      provider: app_user_provider  # Utilise le fournisseur d'utilisateurs d√©fini ci-dessus
      form_login:  # Authentification par formulaire
        login_path: app_login  # La route pour afficher le formulaire de connexion
        check_path: /login  # La route o√π les informations de connexion sont envoy√©es via une requ√™te POST
        default_target_path: /  # Apr√®s une connexion r√©ussie, l'utilisateur est redirig√© vers la page d'accueil
      logout:  # Gestion de la d√©connexion
        path: /logout  # La route pour se d√©connecter
     


  access_control:
  # üö™ Connexion libre
  - { path: ^/login, roles: PUBLIC_ACCESS }

  # üîí D√©connexion uniquement pour les utilisateurs connect√©s
  - { path: ^/logout, roles: IS_AUTHENTICATED_FULLY }

  # ‚úâÔ∏è Page de contact libre
  - { path: ^/contact, roles: PUBLIC_ACCESS }

  # üë§ Page profil uniquement pour les utilisateurs connect√©s
  - { path: ^/profil, roles: ROLE_USER }

  # üì∞ Lecture des articles autoris√©e √† tous
  - { path: ^/articles/\d+$, roles: PUBLIC_ACCESS } # Voir un article (ex: /articles/1)

  # ‚úèÔ∏è Cr√©ation, modification, suppression d'articles ‚Üí R√©serv√© aux admins
  - { path: ^/articles/create, roles: ROLE_ADMIN }
  - { path: ^/articles/\d+/edit, roles: ROLE_ADMIN }
  - { path: ^/articles/\d+/delete, roles: ROLE_ADMIN }

  # üîí Acc√®s complet √† l'administration r√©serv√© aux admins
  - { path: ^/admin, roles: ROLE_ADMIN }

  # üì¶ Acc√®s libre aux assets (images, CSS, JS)
  - { path: ^/uploads, roles: PUBLIC_ACCESS }
  - { path: ^/images, roles: PUBLIC_ACCESS }
  - { path: ^/css, roles: PUBLIC_ACCESS }
  - { path: ^/js, roles: PUBLIC_ACCESS }

  
  - { path: ^/, roles: PUBLIC_ACCESS }
    







   